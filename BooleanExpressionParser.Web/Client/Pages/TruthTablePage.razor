@using BooleanExpressionParser;
@using BooleanExpressionParser.Web.Client.Components;
@using BooleanExpressionParser.Web.Client.Formatters;

@page "/truth-table"

<PageTitle>Truth Table Generator</PageTitle>

<h1>Truth Table Generator</h1>
<p>Generate a truth table for a boolean expression.</p>

<ExpressionInput ButtonClicked="Generate">
    <span>Generate</span>
    <iconify-icon icon="fluent:arrow-right-20-filled"></iconify-icon>
</ExpressionInput>

@if (currentTable is not null)
{
    <div class="table-container">
        @((MarkupString)currentTable)
    </div>
}


@code {
    private string? currentTable;

    private HTMLFormatter formatter = new();

    private void Generate(string? expression)
    {
        if (string.IsNullOrWhiteSpace(expression)) return;
        var wrapper = new ExpressionWrapper(expression);

        var ast = ParseAndGrowAst(wrapper);

        int numCombinations = (int)Math.Pow(2, ast.Variables.Count);
        var table = new List<bool[]>();
        for (int i = 0; i < numCombinations; i++)
        {
            var binary = Convert.ToString(i, 2).PadLeft(ast.Variables.Count, '0');
            var values = binary.Select(c => c == '1').ToArray();

            var variables = ast.Variables.Zip(values, (k, v) => new { k, v }).ToDictionary(x => x.k, x => x.v);

            var result = ast.Root.Evaluate(variables);
            table.Add(values.Append(result).ToArray());
        }

        currentTable = formatter.FormatTruthTable(ast, table, wrapper.Expression);
    }

    private Ast ParseAndGrowAst(ExpressionWrapper wrapper)
    {
        var tokeniser = new Tokeniser(wrapper.Expression);
        var infixTokens = tokeniser.Tokenise();

        var parser = new Parser();
        var postfixTokens = parser.InfixToPostfix(infixTokens);

        return parser.GrowAst(postfixTokens, wrapper.VariableOrder);
    }
}