@page "/evaluator"
@using BooleanExpressionParser.Web.Client.Components

<PageTitle>Expression Evaluator</PageTitle>

<h1>Expression Evaluator</h1>
<p>Produces the output of an expression for given values.</p>
<p>This page will soon be merged into the main app. For now, use it here.</p>

<div class="inputs">
    <ExpressionInput ButtonClicked="ParseExpression" ExpressionChanged="ExpressionChanged"><iconify-icon icon="fluent:arrow-right-20-filled"></iconify-icon></ExpressionInput>

    @if (expressionParsed)
    {
        <ValueInput Ast="ast" EvaluateClicked="Evaluate">
            <iconify-icon icon="fluent:calculator-20-filled"></iconify-icon>
            <span>Evaluate</span>
        </ValueInput>
    }
</div>

@if (result is not null)
{
    <h3>@result</h3>
}

@code {
    private bool expressionParsed = false;
    private Ast? ast;
    private bool? result;

    private void ExpressionChanged(string _)
    {
        expressionParsed = false;
        result = null;
    }

    private void ParseExpression(string? expression)
    {
        if (string.IsNullOrWhiteSpace(expression)) return;
        var wrapper = new ExpressionWrapper(expression);

        var tokeniser = new Tokeniser(wrapper.Expression);
        var infixTokens = tokeniser.Tokenise();

        var parser = new Parser();
        var postfixTokens = parser.InfixToPostfix(infixTokens);

        ast = parser.GrowAst(postfixTokens, wrapper.VariableOrder);

        expressionParsed = true;
    }

    private void Evaluate(Dictionary<string, bool> inputs)
    {
        result = ast.Root.Evaluate(inputs);
    }
}

